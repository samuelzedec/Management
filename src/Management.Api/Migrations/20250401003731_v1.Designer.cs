// <auto-generated />
using System;
using Management.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Management.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250401003731_v1")]
    partial class v1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Management.Domain.Entities.ExpenseType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("Id")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME2")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("Description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("Title");

                    b.HasKey("Id")
                        .HasName("PK_ExpenseType_Id");

                    b.ToTable("ExpenseType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("502ca69e-0e90-42dd-8fa1-737f59f069f0"),
                            CreatedAt = new DateTime(2025, 4, 1, 0, 37, 28, 96, DateTimeKind.Utc).AddTicks(8863),
                            Description = "Aquisição de ingredientes essenciais para a produção de lanches, como pães, queijos, carnes, vegetais e molhos.",
                            Title = "Compras de Ingredientes para Lanches"
                        },
                        new
                        {
                            Id = new Guid("5b51f5ec-b926-4682-a6c9-30c21ccea0e7"),
                            CreatedAt = new DateTime(2025, 4, 1, 0, 37, 28, 96, DateTimeKind.Utc).AddTicks(9623),
                            Description = "Compra de refrigerantes, sucos, águas e outras bebidas que acompanham os lanches oferecidos aos clientes.",
                            Title = "Compras de Bebidas"
                        },
                        new
                        {
                            Id = new Guid("84adb68f-66e1-4674-97af-66996c21b49e"),
                            CreatedAt = new DateTime(2025, 4, 1, 0, 37, 28, 96, DateTimeKind.Utc).AddTicks(9638),
                            Description = "Aquisição de doces e sobremesas, como bolos, tortas, brownies, e outros produtos de confeitaria para acompanhar o cardápio.",
                            Title = "Compras de Produtos de Confeitaria"
                        },
                        new
                        {
                            Id = new Guid("812d8a75-f10a-45b0-abbd-e3db1391af6a"),
                            CreatedAt = new DateTime(2025, 4, 1, 0, 37, 28, 96, DateTimeKind.Utc).AddTicks(9640),
                            Description = "Compra de ingredientes para preparar salgados como coxinhas, empadas, pastéis, e outros itens fritos ou assados.",
                            Title = "Compras de Ingredientes para Salgados"
                        },
                        new
                        {
                            Id = new Guid("de1aefd3-aa1b-4421-8c1e-e88f01f4a40c"),
                            CreatedAt = new DateTime(2025, 4, 1, 0, 37, 28, 96, DateTimeKind.Utc).AddTicks(9642),
                            Description = "Compra de utensílios para a preparação e embalagem dos lanches, como facas, tábuas de corte, embalagens para delivery, sacolas e caixas.",
                            Title = "Compras de Utensílios e Embalagens"
                        },
                        new
                        {
                            Id = new Guid("a44ab9eb-01eb-4fac-b90d-ea4d1e1678e7"),
                            CreatedAt = new DateTime(2025, 4, 1, 0, 37, 28, 96, DateTimeKind.Utc).AddTicks(9645),
                            Description = "Aquisição de produtos para manter o ambiente da lanchonete limpo e higienizado, como detergentes, desinfetantes, esponjas e toalhas.",
                            Title = "Compras de Produtos de Limpeza"
                        },
                        new
                        {
                            Id = new Guid("10fc264a-e211-4721-8901-868596ed1c45"),
                            CreatedAt = new DateTime(2025, 4, 1, 0, 37, 28, 96, DateTimeKind.Utc).AddTicks(9647),
                            Description = "Compra de equipamentos e utensílios necessários para a preparação dos lanches, como fogões, fritadeiras, fornos, grill, liquidificadores e outros.",
                            Title = "Compras de Equipamentos de Cozinha"
                        },
                        new
                        {
                            Id = new Guid("0df6645d-75d1-4c53-b4c4-2f180ccce785"),
                            CreatedAt = new DateTime(2025, 4, 1, 0, 37, 28, 96, DateTimeKind.Utc).AddTicks(9649),
                            Description = "Aquisição de prateleiras, armários, geladeiras, freezers e outros itens para armazenar ingredientes e produtos de forma adequada.",
                            Title = "Compras de Itens de Armazenamento"
                        },
                        new
                        {
                            Id = new Guid("17f83b24-bfa2-4d3c-892e-3f0e4cc391c8"),
                            CreatedAt = new DateTime(2025, 4, 1, 0, 37, 28, 96, DateTimeKind.Utc).AddTicks(9651),
                            Description = "Compra de materiais de escritório, como canetas, papéis, fichários, e outros itens necessários para o funcionamento administrativo da lanchonete.",
                            Title = "Compras de Suprimentos de Escritório"
                        },
                        new
                        {
                            Id = new Guid("1ce28beb-2682-4279-90e2-3f3d219d1d09"),
                            CreatedAt = new DateTime(2025, 4, 1, 0, 37, 28, 96, DateTimeKind.Utc).AddTicks(9652),
                            Description = "Aquisição de uniformes para os funcionários, como aventais, camisetas, bonés e calçados adequados para a rotina da lanchonete.",
                            Title = "Compras de Roupas e Uniformes"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("Id")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("Name");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("NormalizedName");

                    b.HasKey("Id")
                        .HasName("PK_IdentityRole_Id");

                    b.HasIndex(new[] { "NormalizedName" }, "IX_IdentityRole_NormalizedName")
                        .IsUnique();

                    b.ToTable("IdentityRole", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("ClaimType");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("ClaimValue");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("UserId");

                    b.HasKey("Id")
                        .HasName("PK_IdentityRoleClaim_Id");

                    b.ToTable("IdentityRoleClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("Id")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("Email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("BIT")
                        .HasColumnName("EmailConfirmed");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("NormalizedEmail");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("NormalizedUserName");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("PasswordHash");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("BIT")
                        .HasColumnName("PhoneNumberConfirmed");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("UserName");

                    b.HasKey("Id")
                        .HasName("PK_IdentityUser_Id");

                    b.HasIndex(new[] { "NormalizedUserName" }, "IX_IdentityUser_NormalizedUserName")
                        .IsUnique();

                    b.HasIndex(new[] { "Id" }, "IX_User_Email")
                        .IsUnique();

                    b.ToTable("IdentityUser", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("ClaimType");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("ClaimValue");

                    b.Property<Guid>("UserId")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("UserId");

                    b.HasKey("Id")
                        .HasName("PK_IdentityUserClaim_Id");

                    b.ToTable("IdentityUserClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("LoginProvider");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("ProviderKey");

                    b.Property<string>("ProviderDisplayName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("ProviderDisplayName");

                    b.HasKey("UserId", "LoginProvider", "ProviderKey")
                        .HasName("PK_IdentityUserLogin_UserId_LoginProvider_ProviderKey");

                    b.ToTable("IdentityUserLogin", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("UserId");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("RoleId");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PK_IdentityUserRole_UserId_RoleId");

                    b.ToTable("IdentityUserRole", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("LoginProvider");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("Name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(755)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("Value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("PK_IdentityUserToken_UserId_LoginProvider_Name");

                    b.ToTable("IdentityUserToken", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
